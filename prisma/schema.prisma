generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Levels {
  id    Int      @id @default(autoincrement())
  level String
  class Classes?
}

model Classes {
  id             Int                 @id @default(autoincrement())
  levelId        Int                 @unique
  created_at     DateTime            @default(now())
  updated_at     DateTime            @updatedAt
  level          Levels              @relation(fields: [levelId], references: [id])
  activities     ClassesActivities[]
  Notifications  Notifications[]
  UserActivities UserActivities[]
  users          Users[]
}

model UserType {
  id   Int     @id @default(autoincrement())
  name String
  user Users[]
}

model Activities {
  id             Int                 @id @default(autoincrement())
  title          String
  description    String
  file           String?
  created_at     DateTime            @default(now())
  updated_at     DateTime            @updatedAt
  classes        ClassesActivities[]
  UserActivities UserActivities[]
}

model Users {
  id             Int              @id @default(autoincrement())
  classId        Int?
  userTypeId     Int              @default(2)
  email          String           @unique
  name           String
  image          String?
  password       String
  birthDay       DateTime?
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  UserActivities UserActivities[]
  class          Classes?         @relation(fields: [classId], references: [id])
  userType       UserType         @relation(fields: [userTypeId], references: [id])

  @@index([classId], map: "Users_classId_fkey")
  @@index([userTypeId], map: "Users_userTypeId_fkey")
}

model ClassesActivities {
  id           Int        @id @default(autoincrement())
  classId      Int
  activitiesId Int
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  activity     Activities @relation(fields: [activitiesId], references: [id], onDelete: Cascade)
  class        Classes    @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@index([activitiesId], map: "ClassesActivities_activitiesId_fkey")
  @@index([classId], map: "ClassesActivities_classId_fkey")
}

model UserActivities {
  id         Int            @id @default(autoincrement())
  userId     Int
  activityId Int
  classId    Int
  status     ActivityStatus @default(PENDING)
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
  activity   Activities     @relation(fields: [activityId], references: [id], onDelete: Cascade)
  class      Classes        @relation(fields: [classId], references: [id])
  user       Users          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([activityId], map: "UserActivities_activityId_fkey")
  @@index([classId], map: "UserActivities_classId_fkey")
  @@index([userId], map: "UserActivities_userId_fkey")
}

model Notifications {
  id               Int              @id @default(autoincrement())
  classId          Int
  notificationType NotificationType
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  class            Classes          @relation(fields: [classId], references: [id])

  @@index([classId], map: "Notifications_classId_fkey")
}

enum NotificationType {
  ALERT
  MESSAGE
}

enum ActivityStatus {
  PENDING
  COMPLETED
}
